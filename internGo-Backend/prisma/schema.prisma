generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users{
    id String @id @default(uuid())
    roleId Int @default(1)
    planId Int?
    name String
    password String
    email String @unique
    gender String?
    employeeId String?
    skills String[]
    personalEmail String? @unique
    currentAddress String?
    permanentAddress String?
    profilePhoto String?
    resume String?
    batch String?
    year Int?
    designation String?
    phone_no String?
    education Json?
    bankDetails Json?
    zone String?
    certificates_submission_status Boolean?
    status Status?
    dateOfBirth DateTime?
    dateOfJoining DateTime?
    bloodGroup String?
    phase String?
    daysWorked Int @default(0)
    assets Assets[] @relation("UserAssets")
    interactionsAttended Interactions[] @relation("Interaction-Intern")
    interactionsTaken Interactions[] @relation("Interaction-Interviewer")
    dailyUpdates DailyUpdates[] @relation("UserDailyUpdates")
    notifications Notifications[] @relation("User-Notifications")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    profilePercentage Int? @default(0)
    planStartDate DateTime?
    feedbacksReceived Feedbacks[] @relation("Intern-Feedbacks")
    feedbacksGiven Feedbacks[] @relation("Mentor-Feedback")
    role Roles @relation("UserRole",fields:[roleId],references:[id])
    plan Plans? @relation("UserPlan",fields:[planId],references:[id])
    helpRequestsSent    HelpDesk[] @relation("HelpDeskSender")
    helpRequestsAsMentor HelpDesk[] @relation("HelpDeskMentors")
    helpRequestsAsAdmin HelpDesk[] @relation("HelpDeskAdmins")
}

enum Status{
  ACTIVE
  NOT_ACTIVE
  LEAVE
  EXAMINATION
  SHADOWING
  DEPLOYED
}

model Roles{
    id Int @id @default(autoincrement())
    roleName String
    description String
    permissions Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    users Users[] @relation("UserRole")
}

model Assets{
    id Int @id @default(autoincrement())
    userId String
    user Users @relation("UserAssets",fields:[userId],references:[id])
    assetType String
    assetName String
    givenOn DateTime
    returnedOn DateTime?
}

model Plans{
    id Int @id @default(autoincrement()) 
    name String
    description String
    milestones Milestones[] @relation("PlanMilestones")
    users Users[] @relation("UserPlan")
    planDays Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Milestones{
    id Int @id @default(autoincrement())
    planId Int
    name String
    milestoneDays Int
    mentorName String
    objectives Objectives[] @relation("PlanObjectives")
    plan Plans @relation("PlanMilestones",fields:[planId],references:[id],onDelete:Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Objectives{
    id Int @id @default(autoincrement())
    milestoneId Int
    name String
    description String
    objectiveDays Int
    noOfInteractions Int
    roadmapType RoadmapType
    milestone Milestones @relation("PlanObjectives",fields:[milestoneId],references:[id],onDelete:Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum RoadmapType{
    DEFAULT
    CUSTOM
}

model DailyUpdates{
    id Int @id @default(autoincrement())
    date DateTime @default(now())
    userId String
    user Users @relation("UserDailyUpdates",fields:[userId],references:[id])
    tasks DailyUpdateTasks[] @relation("DailyUpdateTasks")
    updatedAt DateTime @updatedAt
}

model DailyUpdateTasks{
    id Int @id @default(autoincrement())
    dailyUpdateId Int
    taskName String
    activitiesPlanned String
    activitiesCompleted String
    estimatedTime Int
    actualTime Int
    taskProgress TaskProgress
    dailyUpdate DailyUpdates @relation("DailyUpdateTasks",fields:[dailyUpdateId],references:[id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum TaskProgress{
    PENDING
    COMPLETED
}

model Interactions{
    id Int @id @default(autoincrement())
    name String
    assignedIntern String
    internEmail String
    assignedMentor String
    assignedInterviewer String
    interviewerEmail String 
    internId String
    interviewerId String
    intern Users @relation("Interaction-Intern",fields:[internId],references:[id])
    interviewer Users @relation("Interaction-Interviewer",fields:[interviewerId],references:[id])
    date DateTime
    time String
    duration String
    feedback Feedbacks[] @relation("Interaction-Feedback")
    interactionStatus InteractionStatus @default(PENDING)
    isScheduled Boolean @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum InteractionStatus{
    PENDING
    COMPLETED
}

model Notifications{
    id Int @id @default(autoincrement())
    userId String?
    type String
    referencesId Int?
    message String
    isRead Boolean @default(false)
    notificationSent Boolean @default(false)
    createdAt DateTime @default(now())

    user Users? @relation("User-Notifications",fields:[userId],references:[id])
}

model Feedbacks {
    id             Int    @id @default(autoincrement())
    interactionId  Int    @unique
    internId       String    
    interviewerId  String    
    ratings        Json      
    descriptive_feedback  String
    avg_rating     Float
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    interaction    Interactions @relation("Interaction-Feedback",fields: [interactionId], references: [id])
    intern         Users        @relation("Intern-Feedbacks",fields: [internId], references: [id])
    interviewer    Users        @relation("Mentor-Feedback",fields: [interviewerId], references: [id])
}

model HelpDesk{
    id Int @id @default(autoincrement())
    subject String
    description String
    priority Priority
    status HelpStatus @default(PENDING)
    senderId    String
    sender      Users    @relation("HelpDeskSender", fields: [senderId], references: [id])
    mentors     Users[]  @relation("HelpDeskMentors")
    admins      Users[]  @relation("HelpDeskAdmins")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum HelpStatus{
    PENDING
    RESOLVED
}

enum Priority{
    LOW
    MEDIUM
    HIGH
}
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users{
    id String @id @default(uuid())
    roleId Int @default(1)
    planId Int?
    name String
    password String
    email String @unique
    gender String?
    employeeId String?
    skills String[]
    personalEmail String? @unique
    currentAddress String?
    permanentAddress String?
    profilePhoto String?
    resume String?
    batch String?
    year Int?
    designation String?
    phone_no String?
    education Json?
    bankDetails Json?
    certificates_submission_status Boolean?
    status Status?
    dateOfBirth DateTime?
    dateOfJoining DateTime?
    bloodGroup String?
    phase String?
    daysWorked Int @default(0)
    assets Assets[] @relation("UserAssets")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    profilePercentage Int? @default(0)
    role Roles @relation("UserRole",fields:[roleId],references:[id])
    plan Plans? @relation("UserPlan",fields:[planId],references:[id])
}

enum Status{
  ACTIVE
  NOT_ACTIVE
  LEAVE
  EXAMINATION
  SHADOWING
  DEPLOYED
}

model Roles{
    id Int @id @default(autoincrement())
    roleName String
    description String
    permissions Json
    createdAt DateTime @default(now())

    users Users[] @relation("UserRole")
}

model Assets{
    id Int @id @default(autoincrement())
    userId String
    user Users @relation("UserAssets",fields:[userId],references:[id])
    assetType String
    assetName String
    givenOn DateTime
    returnedOn DateTime?
}

model Plans{
    id Int @id @default(autoincrement()) 
    name String
    description String
    objectives Objectives[] @relation("PlansObjectives")
    users Users[] @relation("UserPlan")
    noOfDays Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Milestones{
    id Int @id @default(autoincrement())
    planId
}

model Objectives{
    id Int @id @default(autoincrement())
    planId Int
    name String
    description String
    noOfDays Int
    noOfInteractions Int
    mentorName String
    roadmapType String
    plan Plans @relation("PlansObjectives",fields:[planId],references:[id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
